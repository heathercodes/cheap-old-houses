{"version":3,"sources":["webpack:///./src/components/houses/figure.js","webpack:///./src/components/houses/houses.js","webpack:///./src/components/hooks/io.js"],"names":["figureStyle","css","linkStyle","imgStyle","text","Figure","city","href","target","rel","data-src","src","alt","image","PropTypes","address","region","price","link","isRequired","container","item","Houses","houseContext","useContext","houses","observer","setElements","entries","options","elements","useState","setEntries","useRef","threshold","useEffect","IntersectionObserver","ioEntries","rootMargin","element","root","useIO","useLayoutEffect","houseCards","Array","document","entry","lazyImage","house","data-io","key","id"],"mappings":"0JAKA,IAAMA,EAAcC,cAAH,wNAeXC,EAAS,8DAKTC,EAAQ,qCAIRC,EAAI,0EAQK,SAASC,EAAO,GAA+C,IAA/C,+CAAuCC,GAAQ,EAC1E,OACI,wBAAQL,IAAKD,GACT,mBAAGO,KAAH,EAAeN,IAAf,EAA+BO,OAA/B,SAA+CC,IAAI,uBAC/C,qBAAKC,WAAL,EAAsBC,IAAtB,GAA6BC,IAAG,iDAAhC,GAA6EX,IAAKE,KAEtF,4BAAYF,IAAKG,GACb,qCADJ,GAEI,2BAPZ,KAaJC,YAAmB,CACfQ,MAAOC,WADQ,WAEfC,QAASD,WAFM,WAGfE,OAAQF,WAHO,WAIfR,KAAMQ,WAJS,WAKfG,MAAOH,IALQ,OAMfI,KAAMJ,WAAiBK,Y,wCCjD3B,IAAMC,EAAS,iGAQTC,EAAOpB,cAAH,0LAgBK,SAASqB,IACpB,IAAMC,EAAeC,qBAArB,MACM,OAAEC,GAAR,GACOC,EAAUC,EAAaC,GCjCnB,SAAeC,GAC1B,IAAOC,EAAUH,GAAeI,mBAAhC,KACOH,EAASI,GAAcD,mBAA9B,IAEML,EAAWO,iBAAjB,OAEM,8BAAoBC,GAAcL,GAAxC,GAuBA,OArBAM,oBAAU,KACFL,EAAJ,SACIJ,UAAmB,IAAIU,qBAAsBC,IACzCL,MACD,oBAGCM,eAGJR,UAAiBS,IACbb,wBAGD,KACCA,EAAJ,SACIA,yBAGT,CAACI,EAAUU,EAAMF,EAnBpBH,IAqBO,CAACT,EAAD,UAAP,GDIyCe,CAAM,CAC3CP,UAD2C,IAE3CM,KAAM,OAoBV,OAjBAE,0BAAgB,KACZ,GAAIjB,EAAJ,OAAmB,CACf,IAAMkB,EAAaC,WAAWC,0BAA9B,oBACAlB,OAEL,CALHe,IAOAP,oBAAU,KACNP,UAAgBkB,IACZ,GAAIA,EAAJ,eAA0B,CACtB,IAAMC,EAAYD,EAAlB,OACAC,MAAgBA,UAAhBA,IACArB,YAAmBoB,EAAnBpB,YAGT,CAACE,EARJO,IAWI,gCACI,oBAAIlC,IAAKmB,GACLK,EAAA,OAAgBA,EAAA,IAAWuB,GAEnB,oBAAI/C,IAAJ,EAAegD,WAAf,EAAuBC,IAAKF,EAAMG,IAC9B,gBAFR,KAJhB","file":"3.66f7577af1735b2f8ee7.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from '@emotion/core';\nimport { minScreenSize } from '../../data/constants';\n\nconst figureStyle = css`\n    margin: 0;\n    width: 100%;\n    background-color: #E1821E;\n    padding: 8px;\n    border-radius: 3px;\n    min-height: 340px;\n    @media (min-width: 1040px) and (max-width: 1441px) {\n        min-height: 420px;\n    }\n    @media (max-width: ${minScreenSize}px) {\n        min-height: 295px;\n    }\n`;\n\nconst linkStyle = css`\n    display: block;\n    text-decoration: none;\n`;\n\nconst imgStyle = css`\n    width: 100%;\n`;\n\nconst text = css`\n    padding: 18px 9px;\n    text-align: center;\n    p {\n        margin: 8px\n    }\n`;\n\nexport default function Figure({ image, link, address, region, price, city }) {\n    return (\n        <figure css={figureStyle}>\n            <a href={link} css={linkStyle} target=\"_blank\" rel=\"noopener noreferrer\">\n                <img data-src={image} src=\"\" alt={`Listing: ${address}, ${city}, ${region}`} css={imgStyle} />\n            </a>\n            <figcaption css={text}>\n                <p>{address}, {city}, {region}</p>\n                <p>${price}</p>\n            </figcaption>\n        </figure>\n    );\n}\n\nFigure.propTypes = {\n    image: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    region: PropTypes.string.isRequired,\n    city: PropTypes.string.isRequired,\n    price: PropTypes.number,\n    link: PropTypes.string.isRequired\n};\n","import React, { useContext, useEffect, useLayoutEffect } from 'react';\nimport { css } from '@emotion/core';\nimport { HouseContext } from '../../provider';\nimport { minScreenSize } from '../../data/constants';\nimport Figure from './figure';\nimport useIO from '../hooks/io';\n\n// TODO use CSS Grid\nconst container = css`\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n`;\n\nconst item = css`\n    list-style-type: none;\n    width: 30%;\n    margin: 0 12px 12px;\n    &:nth-child(3n + 1) {\n        margin-left: 0px\n    }\n    &:nth-child(3n) {\n        margin-right: 0px\n    }\n    @media (max-width: ${minScreenSize}px) {\n        width: 100%;\n        margin: 0 0 12px;\n    }\n`;\n\nexport default function Houses() {\n    const houseContext = useContext(HouseContext);\n    const { houses } = houseContext;\n    const [observer, setElements, entries] = useIO({\n        threshold: 0.15,\n        root: null\n    })\n\n    useLayoutEffect(() => {\n        if (houses.length) {\n            const houseCards = Array.from(document.querySelectorAll('li[data-io] img'));\n            setElements(houseCards);\n        }\n    }, [houses])\n\n    useEffect(() => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                const lazyImage = entry.target;\n                lazyImage.src = lazyImage.dataset.src;\n                observer.unobserve(entry.target);\n          }\n        })\n    }, [entries, observer])\n\n    return (\n        <>\n            <ul css={container}>{\n                houses.length ? houses.map(house => {\n                    return (\n                        <li css={item} data-io key={house.id}>\n                            <Figure {...house}/>\n                        </li>\n                    );\n                }) :\n                'No houses match your search criteria'\n            }</ul>\n        </>\n    );\n}\n","import { useEffect, useRef, useState } from 'react';\n\nexport default function useIO(options) {\n    const [elements, setElements] = useState([]);\n    const [entries, setEntries] = useState([]);\n\n    const observer = useRef(null);\n\n    const { root, rootMargin, threshold } = options || {};\n\n    useEffect(() => {\n        if (elements.length) {\n            observer.current = new IntersectionObserver((ioEntries) => {\n                setEntries(ioEntries);\n            }, {\n                threshold,\n                root,\n                rootMargin\n            });\n\n            elements.forEach(element => {\n                observer.current.observe(element);\n            });\n        }\n        return () => {\n            if (observer.current) {\n                observer.current.disconnect();\n            }\n        }\n    }, [elements, root, rootMargin, threshold]);\n\n    return [observer.current, setElements, entries];\n};\n"],"sourceRoot":""}